{
    "docs": [
        {
            "location": "/", 
            "text": "Flight Mechanics\n\n\n\n\nFlightMechanics.jl API REFERENCE\n\n\n\n\nFlight Mechanics\n\n\nFlightMechanics.jl API REFERENCE\n\n\nFunctions\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\nAtmosphere ISA (atmosphere.jl)\n\n\n#\n\n\nFlightMechanics.atmosphere_isa\n \n \nMethod\n.\n\n\natmosphere_isa(height)\n\n\n\n\nCalculate temperature, pressure, density and sound velocity for the given geopotential height according to International Standard Atmosphere 1976.\n\n\nReferences\n\n\n\n\n[1] U.S. Standard Atmosphere, 1976, U.S. Government Printing Office,       Washington, D.C., 1976\n\n\n\n\nFrom: https://en.wikipedia.org/wiki/U.S.\nStandard\nAtmosphere\n\n\n\n\n\n\n\n\nLayer\n\n\nh (m)\n\n\np (Pa)\n\n\nT (K)\n\n\n$\u03b1$ (K/m)\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n101325\n\n\n288.15\n\n\n-0.0065\n\n\n\n\n\n\n1\n\n\n11000\n\n\n22632.1\n\n\n216.65\n\n\n0\n\n\n\n\n\n\n2\n\n\n20000\n\n\n5474.89\n\n\n216.65\n\n\n0.001\n\n\n\n\n\n\n3\n\n\n32000\n\n\n868.019\n\n\n228.65\n\n\n0.0028\n\n\n\n\n\n\n4\n\n\n47000\n\n\n110.906\n\n\n270.65\n\n\n0\n\n\n\n\n\n\n5\n\n\n51000\n\n\n66.9389\n\n\n270.65\n\n\n-0.0028\n\n\n\n\n\n\n6\n\n\n71000\n\n\n3.95642\n\n\n214.65\n\n\n-0.002\n\n\n\n\n\n\n\n\nsource\n\n\n\n\nCoordinates Systems (coordinates.jl)\n\n\n#\n\n\nFlightMechanics.body2hor\n \n \nMethod\n.\n\n\nbody2hor(xb, yb, zb, psi, theta, phi)\n\n\n\n\nTransform body coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2hor\n \n \nMethod\n.\n\n\nbody2hor(xb, yb, zb, q0, q1, q2, q3)\n\n\n\n\nTransform body coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2body\n \n \nMethod\n.\n\n\nhor2body(xh, yh, zh, psi, theta, phi)\n\n\n\n\nTransform local horizon coordinates to body.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2body\n \n \nMethod\n.\n\n\nhor2body(xb, yb, zb, q0, q1, q2, q3)\n\n\n\n\nTransform local horizon corrdinates to body coordinates.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_body2hor\n \n \nMethod\n.\n\n\nrot_matrix_body2hor(psi, theta, phi)\n\n\n\n\nRotation matrix from body to local horizon\n\n\nArguments\n\n\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_body2hor\n \n \nMethod\n.\n\n\nrot_matrix_body2hor(q0, q1, q2, q3)\n\n\n\n\nRotation matrix to transform from body to local horizon.\n\n\nArguments\n\n\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 41, formula 1.4-23)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_hor2body\n \n \nMethod\n.\n\n\nrot_matrix_hor2body(psi, theta, phi)\n\n\n\n\nRotation matrix from body to local horizon\n\n\nArguments\n\n\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_hor2body\n \n \nMethod\n.\n\n\nrot_matrix_hor2body(q0, q1, q2, q3)\n\n\n\n\nRotation matrix to transform from local horizon to body.\n\n\nArguments\n\n\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 41, formula 1.4-23)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.wind2hor\n \n \nMethod\n.\n\n\nwind2hor(xw, yw, zw, chi, gamma, mu)\n\n\n\n\nTransform wind coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxw, yw, zw\n: wind coordinates.\n\n\nchi, gamma, mu\n: Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2wind\n \n \nMethod\n.\n\n\nhor2wind(xh, yh, zh, chi, gamma, mu)\n\n\n\n\nTransform local horizon coordinates to wind.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nchi, gamma, mu\n: Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2wind\n \n \nMethod\n.\n\n\nbody2wind(xb, yb, zb, alpha, beta)\n\n\n\n\nTransform body coordinates to wind.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nalpha, beta\n: Aerodynamic angles. Angle of attack, angle of side-slip (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.wind2body\n \n \nMethod\n.\n\n\nwind2body(xw, yw, zw, alpha, beta)\n\n\n\n\nTransform body coordinates to wind.\n\n\nArguments\n\n\n\n\nxw, yw, zw\n: wind coordinates.\n\n\nalpha, beta\n: Aerodynamic angles. Angle of attack, angle of side-slip (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.euler2quaternion\n \n \nMethod\n.\n\n\neuler2quaternion(psi, theta, phi)\n\n\n\n\nTransform Euler angles orientation to quaternion orientation.\n\n\nArguments\n\n\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nReferences\n\n\n\n\n[1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle\n\n\n\n\ndynamics. American Institute of Aeronautics and Astronautics.  (page 126, formula 4.78)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.quaternion2euler\n \n \nMethod\n.\n\n\nquaternion2euler(q0, q1, q2, q3)\n\n\n\n\nTransform quaternion orientation to Euler angles orientation.\n\n\nArguments\n\n\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nReferences\n\n\n\n\n[1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle\n\n\n\n\ndynamics. American Institute of Aeronautics and Astronautics.  (page 127, formula 4.82)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2hor\n \n \nMethod\n.\n\n\necef2hor(xecef, yecef, zecef, lat, lon)\n\n\n\n\nTransform ECEF (Earth Fixed Earth Centered) coordinates to local horizon coordinates using geodetic latitude and longitude.\n\n\nArguments\n\n\n\n\nxecef, yecef, zecef\n: ECEF coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 36, formula 1.4-9)\n\n\nNotes\n\n\nX, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y-\nX, Z-\nY, X-\nZ\n\n\n[1] Only defines the opposite transformation. However this must be the   transpose of hor2ecef.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2ecef\n \n \nMethod\n.\n\n\nhor2ecef(xh, yh, zh, lat, lon)\n\n\n\n\nTransform local horizon coordinates to ECEF (Earth Centered Earth Fixed)  coordinates using geodetic latitude and longitude.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 36, formula 1.4-9)\n\n\nNotes\n\n\nX, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y-\nX, Z-\nY, X-\nZ\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_ecef2hor\n \n \nMethod\n.\n\n\nrot_matrix_ecef2hor(lat, lon)\n\n\n\n\nRotation matrix to transform from ECEF to local horizon.\n\n\nArguments\n\n\n\n\nlat, lon\n: geodetic latitude and longitude (rad)\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 36, formula 1.4-9)\n\n\nNotes\n\n\nX, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y-\nX, Z-\nY, X-\nZ\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_hor2ecef\n \n \nMethod\n.\n\n\nrot_matrix_hor2ecef(lat, lon)\n\n\n\n\nRotation matrix to transform from local horizon to ECEF.\n\n\nArguments\n\n\n\n\nlat, lon\n: geodetic latitude and longitude (rad)\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 36, formula 1.4-9)\n\n\nNotes\n\n\nX, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y-\nX, Z-\nY, X-\nZ\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2body\n \n \nMethod\n.\n\n\necef2body(xecef, yecef, zecef, lat, lon, psi, theta, phi)\n\n\n\n\nTransform ECEF coordinates to body coordinates.\n\n\nArguments\n\n\n\n\nxecef, yecef, zecef\n: ECEF (Earth Centered Earth Fixed) coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2body\n \n \nMethod\n.\n\n\necef2body(xecef, yecef, zecef, lat, lon, q0, q1, q2, q3)\n\n\n\n\nTransform ECEF coordinates to body coordinates.\n\n\nArguments\n\n\n\n\nxecef, yecef, zecef\n: ECEF (Earth Centered Earth Fixed) coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2ecef\n \n \nMethod\n.\n\n\nbody2ecef(xb, yb, zb, lat, lon, psi, theta, phi)\n\n\n\n\nTransform body coordinates to ECEF coordinates.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2ecef\n \n \nMethod\n.\n\n\nbody2ecef(xb, yb, zb, lat, lon, q0, q1, q2, q3)\n\n\n\n\nTransform body coordinates to ECEF coordinates.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_body2ecef\n \n \nMethod\n.\n\n\nrot_matrix_body2ecef(lat, lon, psi, theta, phi)\n\n\n\n\nRotation matrix to transform from body to ECEF\n\n\nArguments\n\n\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 37, formula 1.4-11)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_body2ecef\n \n \nMethod\n.\n\n\nrot_matrix_body2ecef(lat, lon, q0, q1, q2, q3)\n\n\n\n\nRotation matrix to transform from body to ECEF\n\n\nArguments\n\n\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 37, formula 1.4-11)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_ecef2body\n \n \nMethod\n.\n\n\nrot_matrix_ecef2body(lat, lon, psi, theta, phi)\n\n\n\n\nRotation matrix to transform from ECEF to body\n\n\nArguments\n\n\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 37, formula 1.4-11)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rot_matrix_ecef2body\n \n \nMethod\n.\n\n\nrot_matrix_ecef2body(lat, lon, q0, q1, q2, q3)\n\n\n\n\nRotation matrix to transform from ECEF to body\n\n\nArguments\n\n\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 37, formula 1.4-11)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.llh2ecef\n \n \nMethod\n.\n\n\nllh2ecef(lat, lon, height; ellipsoid=WGS84)\n\n\n\n\nTransform geodetic latitude, longitude and ellipsoidal height to ECEF for the given ellipsoid (default ellipsoid is WGS84)\n\n\nReferences\n\n\n\n\n[1] Rogers, R. M. (2007). Applied mathematics in integrated navigation\n\n\n\n\nsystems. American Institute of Aeronautics and Astronautics.  (Page 75, equations 4.20, 4.21, 4.22)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2llh\n \n \nMethod\n.\n\n\necef2llh(xecef, yecef, zecef; ellipsoid=WGS84)\n\n\n\n\nTransform ECEF coordinates to geodetic latitude, longitude and ellipsoidal  height for the given ellipsoid (default ellipsoid is WGS84)\n\n\nReferences\n\n\n\n\n[1] Bowring, B. R. (1976). Transformation from spatial to geographical\n\n\n\n\ncoordinates. Survey review, 23(181), 323-327.\n\n\n\n\n[2] Bowring, B. R. (1985). The accuracy of geodetic latitude and height\n\n\n\n\nequations. Survey Review, 28(218), 202-206.\n\n\nNotes\n\n\n\n\nThe transformation is direct without iterations as [1] introduced the need to\n\n\n\n\niterate for near Earth positions.\n\n\n\n\n[2] is an updated of increased accuracy of [1]. The former is used in this\n\n\n\n\nimplementation although the latter implementation is commented in the code.\n\n\n\n\nModel becomes unstable if latitude is close to 90\u00ba. An alternative equation\n\n\n\n\ncan be found in [2] equation (16) but has not been implemented.\n\n\nsource\n\n\n\n\nAnemometry\n\n\n#\n\n\nFlightMechanics.qc2cas\n \n \nMethod\n.\n\n\nqc2cas(qc)\n\n\n\n\nCalculate calibrated airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure. qc = p\nt - p\ns\n\n\nReferences\n\n\n\n\n[1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.13)\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.qc2tas\n \n \nMethod\n.\n\n\nqc2tas(qc, \u03c1, p)\n\n\n\n\nCalculate true airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p\nt - p\ns), rho and p.\n\n\nReferences\n\n\n\n\n[1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 12, based on formula 2.11)\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.qc2eas\n \n \nMethod\n.\n\n\nqc2eas(qc, p)\n\n\n\n\nCalculate equivalent airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p\nt - p\ns) and p.\n\n\nReferences\n\n\n\n\n[1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas2eas\n \n \nMethod\n.\n\n\ntas2eas(tas, \u03c1)\n\n\n\n\nCalculate equivalent airspeed from true airspeed and density at current  altitude (\u03c1).\n\n\nReferences\n\n\n\n\n[1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.15)\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.eas2tas\n \n \nMethod\n.\n\n\neas2tas(qc, \u03c1)\n\n\n\n\nCalculate true airspeed from equivalent airspeed and density at current  altitude (\u03c1).\n\n\nReferences\n\n\n\n\n[1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.15)\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.cas2eas\n \n \nMethod\n.\n\n\ncas2eas(cas, \u03c1, p)\n\n\n\n\nCalculate equivalent airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.eas2cas\n \n \nMethod\n.\n\n\neas2cas(eas, \u03c1, p)\n\n\n\n\nCalculate calibrated airspeed from equivalent airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.cas2tas\n \n \nMethod\n.\n\n\ncas2tas(cas, \u03c1, p)\n\n\n\n\nCalculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas2cas\n \n \nMethod\n.\n\n\ncas2tas(cas, \u03c1, p)\n\n\n\n\nCalculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas_alpha_beta_from_uvw\n \n \nMethod\n.\n\n\ntas_alpha_beta_from_uvw(u, v, w)\n\n\n\n\nCalculate true air speed (TAS), angle of attack (\u03b1) and angle of side-slip (\u03b2) from aerodynamic velocity expressed in body axis.\n\n\nReferences\n\n\n\n\n[1] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications    (page 114, formulas 4.3,2 and 4.3,3)\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.incompressible_qinf\n \n \nMethod\n.\n\n\nincompressible_qinf(tas, \u03c1)\n\n\n\n\nCalculate incompressible dynamic pressure from true airspeed (tas) and density (\u03c1) at current altitude.\n\n\nReferences\n\n\n\n\n[1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.14)\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.compressible_qinf\n \n \nMethod\n.\n\n\ncompressible_qinf(tas, p, a)\n\n\n\n\nCalculate compressible dynamic pressure from Mach number and static  pressure (p)\n\n\nTwo different models are used depending on the Mach number:\n\n\n\n\nSubsonic case: Bernouilli's equation compressible form.\n\n\nSupersonic case: to be implemented.\n\n\n\n\nReferences\n\n\n\n\n[1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 12)\n\n\n\n\nsource\n\n\n\n\nKinematics\n\n\n#\n\n\nFlightMechanics.rigid_body_velocity\n \n \nMethod\n.\n\n\nrigid_body_velocity(vel_P, \u03c9, r_PQ)\n\n\n\n\nCalculate the velocity of a point Q of a rigid solid given the velocity of a  point P (vel_P), the rotational velocity of the solid (\u03c9) and the relative position of Q wrt P.\n\n\nIf the reference frame 1 is attached to the solid and the velocity is  calculated with respect to reference frame 0:\n\n\n$v_{10}^{Q} = v_{10}^{P} + \\omega_{10} \\times r^{PQ}$\n\n\nbeing:\n\n\n\n\n$v_{10}^{Q}$ the velocity of point Q, fixed to 1, wrt 0\n\n\n$\\omega_{10}$ the angular velocity of the solid 1 wrt 0\n\n\n$r^{PQ}$ the position of Q wrt P ($r^{Q}-r^{P}$)\n\n\n\n\nEvery vector needs to be expressed in the same coordinate system.\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (Section 1.3, page 26)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.rigid_body_acceleration\n \n \nMethod\n.\n\n\nrigid_body_acceleration(acc_P, \u03c9, \u03c9_dot, r_PQ)\n\n\n\n\nCalculate the acceleration of a point Q of a rigid solid given the acceleration of a point P (acc\nP), the rotational velocity of the solid (\u03c9), the rotational  acceleration of the solid (\u03c9\ndot) and the relative position of Q wrt P.\n\n\n$a_{10}^{Q} = a_{10}^{P} + \\omega_{10} \\times (\\omega_{10} \\times r^{PQ}) + \\dot{\\omega}_{10} \\times r^{PQ}$\n\n\nbeing:\n\n\n\n\n$a_{10}^{Q}$ the acceleration of point Q, fixed to 1, wrt 0\n\n\n$\\omega_{10}$ the angular velocity of the solid 1 wrt 0\n\n\n$\\dot{\\omega}_{10}$ the angular acceleration of the solid 1 wrt 0\n\n\n$r^{PQ}$ the position of Q wrt P ($r^{Q}-r^{P}$)\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (Section 1.3, Formaula 1.3-14c, page 26)\n\n\nsource\n\n\n\n\n6 Degrees of Freedom dynamic models\n\n\n#\n\n\nFlightMechanics.six_dof_euler_fixed_mass\n \n \nMethod\n.\n\n\nsix_dof_euler_fixed_mass(state, mass, inertia, forces, moments)\n\n\n\n\nSix degrees of freedom dynamic system using Euler angles for attitude  representation and assuming fixed mass. \n\n\nFlat Earth hypothesis is applied and Earth reference frame is considered inertial.\n\n\nIt is considered that the aircraft xb-zb plane is a plane of symmetry so that Jxy and Jyz cross-product of inertia are zero and will not be taken into  account.\n\n\nArguments\n\n\n\n\nstate::12-element Array{Number,1}\n: state vector.   u, v, w: inertial linear velocity expressed in body axis. (m/s)   p, q, r: inertial rotatinal velocity expressed in body axis. (rad/s)   \u03c8, \u03b8, \u03d5: attitude given by Euler angles (zyx). Yaw, pitch, roll. (rad)   xe, ye, ze: position wrt the inertial system origin expressed in Earth Axis. (m)\n\n\nmass::Number\n: total mass of the aircraft (kg)\n\n\ninertia::3\u00d73 Array{Number,2}\n: inertia tensor (kg\u00b7m\u00b2)\n\n\nforces::3-element Array{Number,1}\n: total forces expressed in body axis. (N)\n\n\nmoments::3-element Array{Number,1}\n: total moments expressed in body axis.(N\u00b7m)\n\n\n\n\nReturns\n\n\n\n\nstate_dot\n: state vector derivative according to the equation of motion,   inertial properties and applied forces and moments.\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (Section 1.5, equations 1.5-4, page 46)\n\n\n\n\n[2] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications\n\n\n\n\n(Section 5.8, page 148, formulas 5.8,1 to 5.8,7)\n\n\n\n\n[3] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle\n\n\n\n\ndynamics. American Institute of Aeronautics and Astronautics.  (page 368, figure 10.2, not taking into account quaternions in angular   kinematic equations)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.six_dof_quaternion_fixed_mass\n \n \nMethod\n.\n\n\nsix_dof_quaternion_fixed_mass(state, mass, inertia, forces, moments; k=0.0)\n\n\n\n\nSix degrees of freedom dynamic system using quaternions for attitude  representation and assuming fixed mass. \n\n\nFlat Earth hypothesis is applied and Earth reference frame is considered inertial.\n\n\nIt is considered that the aircraft xb-zb plane is a plane of symmetry so that Jxy and Jyz cross-product of inertia are zero and will not be taken into  account.\n\n\nArguments\n\n\n\n\nstate::12-element Array{Number,1}\n: state vector.   u, v, w: inertial linear velocity expressed in body axis. (m/s)   p, q, r: inertial rotatinal velocity expressed in body axis. (rad/s)   q0, q1, q2, q3: attitude given by quaternions.   xe, ye, ze: position wrt the inertial system origin expressed in Earth Axis. (m)\n\n\nmass::Number\n: total mass of the aircraft (kg)\n\n\ninertia::3\u00d73 Array{Number,2}\n: inertia tensor (kg\u00b7m\u00b2)\n\n\nforces::3-element Array{Number,1}\n: total forces expressed in body axis. (N)\n\n\nmoments::3-element Array{Number,1}\n: total moments expressed in body axis.(N\u00b7m)\n\n\nk::Number\n: orthonormality error factor.\n\n\n\n\nReturns\n\n\n\n\nstate_dot\n: state vector derivative according to the equation of motion,   inertial properties and applied forces and moments.\n\n\n\n\nNotes\n\n\n\n\nSee \n1\n or \n2\n for more information on quaternions \n-\n Euler angles conversions.\n\n\nOrthonormality error factor is related to a numerical stability artifact used in angular kinematic equations. Let \u03bb = k * (1 - q0\u00b2 - q1\u00b2 - q2\u00b2 - q3\u00b2) be the orthonormality error. The term k\u00b7\u03bb\u00b7q is added to the angular kinematic equations in order to reduce the numerical integration error. According to reference [2] k\u00b7\u0394t \u2264 1. See \n2\n for more information on  orthonormality error factor.\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (Section 1.5, equations 1.5-4, page 46)\n\n\n\n\n[2] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle\n\n\n\n\ndynamics. American Institute of Aeronautics and Astronautics.  (page 368, figure 10.2)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.six_dof_ecef_quaternion_fixed_mass\n \n \nMethod\n.\n\n\nsix_dof_ecef_quaternion_fixed_mass(state, mass, inertia, forces, moments;\nk=0.0, ellipsoid=WGS84)\n\n\n\n\nSix degrees of freedom dynamic system using quaternions for attitude  representation and assuming fixed mass. \n\n\nEllipsoidal Earth Model is used and the ECEF reference frame is considered inertial.\n\n\nIt is considered that the aircraft xb-zb plane is a plane of symmetry so that Jxy and Jyz cross-product of inertia are zero and will not be taken into  account.\n\n\nArguments\n\n\n\n\nstate::12-element Array{Number,1}\n: state vector.   u, v, w: inertial linear velocity expressed in body axis. (m/s)   p, q, r: inertial rotatinal velocity expressed in body axis. (rad/s)   q0, q1, q2, q3: attitude given by quaternions.   xe, ye, ze: position wrt the inertial system origin expressed in Earth Axis. (m)\n\n\nmass::Number\n: total mass of the aircraft (kg)\n\n\ninertia::3\u00d73 Array{Number,2}\n: inertia tensor (kg\u00b7m\u00b2)\n\n\nforces::3-element Array{Number,1}\n: total forces expressed in body axis. (N)\n\n\nmoments::3-element Array{Number,1}\n: total moments expressed in body axis.(N\u00b7m)\n\n\nk::Number\n: orthonormality error factor.\n\n\nellipsoid::Ellipsoid\n: ellipsoid model to be used.\n\n\n\n\nReturns\n\n\n\n\nstate_dot\n: state vector derivative according to the equation of motion,   inertial properties and applied forces and moments.\n\n\n\n\nNotes\n\n\n\n\nSee \n1\n or \n2\n for more information on quaternions \n-\n Euler angles conversions.\n\n\nOrthonormality error factor is related to a numerical stability artifact used in angular kinematic equations. Let \u03bb = k * (1 - q0\u00b2 - q1\u00b2 - q2\u00b2 - q3\u00b2) be the orthonormality error. The term k\u00b7\u03bb\u00b7q is added to the angular kinematic equations in order to reduce the numerical integration error. According to reference [2] k\u00b7\u0394t \u2264 1. See \n2\n for more information on  orthonormality error factor.\n\n\nImplementation based on [1]. However, [2] can also be read.\n\n\n\n\nReferences\n\n\n\n\n[1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:\n\n\n\n\ndynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 45, formula 1.5-1)\n\n\n\n\n[2] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle\n\n\n\n\ndynamics. American Institute of Aeronautics and Astronautics.  (page 396, figure 10.6)\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nFlightMechanics.atmosphere_isa\n\n\nFlightMechanics.body2ecef\n\n\nFlightMechanics.body2ecef\n\n\nFlightMechanics.body2hor\n\n\nFlightMechanics.body2hor\n\n\nFlightMechanics.body2wind\n\n\nFlightMechanics.cas2eas\n\n\nFlightMechanics.cas2tas\n\n\nFlightMechanics.compressible_qinf\n\n\nFlightMechanics.eas2cas\n\n\nFlightMechanics.eas2tas\n\n\nFlightMechanics.ecef2body\n\n\nFlightMechanics.ecef2body\n\n\nFlightMechanics.ecef2hor\n\n\nFlightMechanics.ecef2llh\n\n\nFlightMechanics.euler2quaternion\n\n\nFlightMechanics.hor2body\n\n\nFlightMechanics.hor2body\n\n\nFlightMechanics.hor2ecef\n\n\nFlightMechanics.hor2wind\n\n\nFlightMechanics.incompressible_qinf\n\n\nFlightMechanics.llh2ecef\n\n\nFlightMechanics.qc2cas\n\n\nFlightMechanics.qc2eas\n\n\nFlightMechanics.qc2tas\n\n\nFlightMechanics.quaternion2euler\n\n\nFlightMechanics.rigid_body_acceleration\n\n\nFlightMechanics.rigid_body_velocity\n\n\nFlightMechanics.rot_matrix_body2ecef\n\n\nFlightMechanics.rot_matrix_body2ecef\n\n\nFlightMechanics.rot_matrix_body2hor\n\n\nFlightMechanics.rot_matrix_body2hor\n\n\nFlightMechanics.rot_matrix_ecef2body\n\n\nFlightMechanics.rot_matrix_ecef2body\n\n\nFlightMechanics.rot_matrix_ecef2hor\n\n\nFlightMechanics.rot_matrix_hor2body\n\n\nFlightMechanics.rot_matrix_hor2body\n\n\nFlightMechanics.rot_matrix_hor2ecef\n\n\nFlightMechanics.six_dof_ecef_quaternion_fixed_mass\n\n\nFlightMechanics.six_dof_euler_fixed_mass\n\n\nFlightMechanics.six_dof_quaternion_fixed_mass\n\n\nFlightMechanics.tas2cas\n\n\nFlightMechanics.tas2eas\n\n\nFlightMechanics.tas_alpha_beta_from_uvw\n\n\nFlightMechanics.wind2body\n\n\nFlightMechanics.wind2hor", 
            "title": "Home"
        }, 
        {
            "location": "/#flight-mechanics", 
            "text": "", 
            "title": "Flight Mechanics"
        }, 
        {
            "location": "/#flightmechanicsjl-api-reference", 
            "text": "Flight Mechanics  FlightMechanics.jl API REFERENCE  Functions  Index", 
            "title": "FlightMechanics.jl API REFERENCE"
        }, 
        {
            "location": "/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/#atmosphere-isa-atmospherejl", 
            "text": "#  FlightMechanics.atmosphere_isa     Method .  atmosphere_isa(height)  Calculate temperature, pressure, density and sound velocity for the given geopotential height according to International Standard Atmosphere 1976.  References   [1] U.S. Standard Atmosphere, 1976, U.S. Government Printing Office,       Washington, D.C., 1976   From: https://en.wikipedia.org/wiki/U.S. Standard Atmosphere     Layer  h (m)  p (Pa)  T (K)  $\u03b1$ (K/m)      0  0  101325  288.15  -0.0065    1  11000  22632.1  216.65  0    2  20000  5474.89  216.65  0.001    3  32000  868.019  228.65  0.0028    4  47000  110.906  270.65  0    5  51000  66.9389  270.65  -0.0028    6  71000  3.95642  214.65  -0.002     source", 
            "title": "Atmosphere ISA (atmosphere.jl)"
        }, 
        {
            "location": "/#coordinates-systems-coordinatesjl", 
            "text": "#  FlightMechanics.body2hor     Method .  body2hor(xb, yb, zb, psi, theta, phi)  Transform body coordinates to local horizon.  Arguments   xb, yb, zb : body coordinates.  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.body2hor     Method .  body2hor(xb, yb, zb, q0, q1, q2, q3)  Transform body coordinates to local horizon.  Arguments   xb, yb, zb : body coordinates.  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.hor2body     Method .  hor2body(xh, yh, zh, psi, theta, phi)  Transform local horizon coordinates to body.  Arguments   xh, yh, zh : local horizon coordinates.  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.hor2body     Method .  hor2body(xb, yb, zb, q0, q1, q2, q3)  Transform local horizon corrdinates to body coordinates.  Arguments   xh, yh, zh : local horizon coordinates.  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.rot_matrix_body2hor     Method .  rot_matrix_body2hor(psi, theta, phi)  Rotation matrix from body to local horizon  Arguments   psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.rot_matrix_body2hor     Method .  rot_matrix_body2hor(q0, q1, q2, q3)  Rotation matrix to transform from body to local horizon.  Arguments   q0, q1, q2, q3 : quaternions.   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 41, formula 1.4-23)  source  #  FlightMechanics.rot_matrix_hor2body     Method .  rot_matrix_hor2body(psi, theta, phi)  Rotation matrix from body to local horizon  Arguments   psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.rot_matrix_hor2body     Method .  rot_matrix_hor2body(q0, q1, q2, q3)  Rotation matrix to transform from local horizon to body.  Arguments   q0, q1, q2, q3 : quaternions.   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 41, formula 1.4-23)  source  #  FlightMechanics.wind2hor     Method .  wind2hor(xw, yw, zw, chi, gamma, mu)  Transform wind coordinates to local horizon.  Arguments   xw, yw, zw : wind coordinates.  chi, gamma, mu : Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).   source  #  FlightMechanics.hor2wind     Method .  hor2wind(xh, yh, zh, chi, gamma, mu)  Transform local horizon coordinates to wind.  Arguments   xh, yh, zh : local horizon coordinates.  chi, gamma, mu : Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).   source  #  FlightMechanics.body2wind     Method .  body2wind(xb, yb, zb, alpha, beta)  Transform body coordinates to wind.  Arguments   xb, yb, zb : body coordinates.  alpha, beta : Aerodynamic angles. Angle of attack, angle of side-slip (rad).   source  #  FlightMechanics.wind2body     Method .  wind2body(xw, yw, zw, alpha, beta)  Transform body coordinates to wind.  Arguments   xw, yw, zw : wind coordinates.  alpha, beta : Aerodynamic angles. Angle of attack, angle of side-slip (rad).   source  #  FlightMechanics.euler2quaternion     Method .  euler2quaternion(psi, theta, phi)  Transform Euler angles orientation to quaternion orientation.  Arguments   psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   References   [1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle   dynamics. American Institute of Aeronautics and Astronautics.  (page 126, formula 4.78)  source  #  FlightMechanics.quaternion2euler     Method .  quaternion2euler(q0, q1, q2, q3)  Transform quaternion orientation to Euler angles orientation.", 
            "title": "Coordinates Systems (coordinates.jl)"
        }, 
        {
            "location": "/#arguments", 
            "text": "q0, q1, q2, q3 : quaternions.   References   [1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle   dynamics. American Institute of Aeronautics and Astronautics.  (page 127, formula 4.82)  source  #  FlightMechanics.ecef2hor     Method .  ecef2hor(xecef, yecef, zecef, lat, lon)  Transform ECEF (Earth Fixed Earth Centered) coordinates to local horizon coordinates using geodetic latitude and longitude.  Arguments   xecef, yecef, zecef : ECEF coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 36, formula 1.4-9)  Notes  X, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y- X, Z- Y, X- Z  [1] Only defines the opposite transformation. However this must be the   transpose of hor2ecef.  source  #  FlightMechanics.hor2ecef     Method .  hor2ecef(xh, yh, zh, lat, lon)  Transform local horizon coordinates to ECEF (Earth Centered Earth Fixed)  coordinates using geodetic latitude and longitude.  Arguments   xh, yh, zh : local horizon coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 36, formula 1.4-9)  Notes  X, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y- X, Z- Y, X- Z  source  #  FlightMechanics.rot_matrix_ecef2hor     Method .  rot_matrix_ecef2hor(lat, lon)  Rotation matrix to transform from ECEF to local horizon.  Arguments   lat, lon : geodetic latitude and longitude (rad)   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 36, formula 1.4-9)  Notes  X, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y- X, Z- Y, X- Z  source  #  FlightMechanics.rot_matrix_hor2ecef     Method .  rot_matrix_hor2ecef(lat, lon)  Rotation matrix to transform from local horizon to ECEF.  Arguments   lat, lon : geodetic latitude and longitude (rad)   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 36, formula 1.4-9)  Notes  X, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y- X, Z- Y, X- Z  source  #  FlightMechanics.ecef2body     Method .  ecef2body(xecef, yecef, zecef, lat, lon, psi, theta, phi)  Transform ECEF coordinates to body coordinates.  Arguments   xecef, yecef, zecef : ECEF (Earth Centered Earth Fixed) coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.ecef2body     Method .  ecef2body(xecef, yecef, zecef, lat, lon, q0, q1, q2, q3)  Transform ECEF coordinates to body coordinates.  Arguments   xecef, yecef, zecef : ECEF (Earth Centered Earth Fixed) coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.body2ecef     Method .  body2ecef(xb, yb, zb, lat, lon, psi, theta, phi)  Transform body coordinates to ECEF coordinates.  Arguments   xb, yb, zb : body coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.body2ecef     Method .  body2ecef(xb, yb, zb, lat, lon, q0, q1, q2, q3)  Transform body coordinates to ECEF coordinates.  Arguments   xb, yb, zb : body coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.rot_matrix_body2ecef     Method .  rot_matrix_body2ecef(lat, lon, psi, theta, phi)  Rotation matrix to transform from body to ECEF  Arguments   lat : geodetic latitude (rad).  lon : longitude (rad).  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 37, formula 1.4-11)  source  #  FlightMechanics.rot_matrix_body2ecef     Method .  rot_matrix_body2ecef(lat, lon, q0, q1, q2, q3)  Rotation matrix to transform from body to ECEF  Arguments   lat : geodetic latitude (rad).  lon : longitude (rad).  q0, q1, q2, q3 : quaternions.   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 37, formula 1.4-11)  source  #  FlightMechanics.rot_matrix_ecef2body     Method .  rot_matrix_ecef2body(lat, lon, psi, theta, phi)  Rotation matrix to transform from ECEF to body  Arguments   lat : geodetic latitude (rad).  lon : longitude (rad).  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 37, formula 1.4-11)  source  #  FlightMechanics.rot_matrix_ecef2body     Method .  rot_matrix_ecef2body(lat, lon, q0, q1, q2, q3)  Rotation matrix to transform from ECEF to body  Arguments   lat : geodetic latitude (rad).  lon : longitude (rad).  q0, q1, q2, q3 : quaternions.   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 37, formula 1.4-11)  source  #  FlightMechanics.llh2ecef     Method .  llh2ecef(lat, lon, height; ellipsoid=WGS84)  Transform geodetic latitude, longitude and ellipsoidal height to ECEF for the given ellipsoid (default ellipsoid is WGS84)  References   [1] Rogers, R. M. (2007). Applied mathematics in integrated navigation   systems. American Institute of Aeronautics and Astronautics.  (Page 75, equations 4.20, 4.21, 4.22)  source  #  FlightMechanics.ecef2llh     Method .  ecef2llh(xecef, yecef, zecef; ellipsoid=WGS84)  Transform ECEF coordinates to geodetic latitude, longitude and ellipsoidal  height for the given ellipsoid (default ellipsoid is WGS84)  References   [1] Bowring, B. R. (1976). Transformation from spatial to geographical   coordinates. Survey review, 23(181), 323-327.   [2] Bowring, B. R. (1985). The accuracy of geodetic latitude and height   equations. Survey Review, 28(218), 202-206.  Notes   The transformation is direct without iterations as [1] introduced the need to   iterate for near Earth positions.   [2] is an updated of increased accuracy of [1]. The former is used in this   implementation although the latter implementation is commented in the code.   Model becomes unstable if latitude is close to 90\u00ba. An alternative equation   can be found in [2] equation (16) but has not been implemented.  source", 
            "title": "Arguments"
        }, 
        {
            "location": "/#anemometry", 
            "text": "#  FlightMechanics.qc2cas     Method .  qc2cas(qc)  Calculate calibrated airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure. qc = p t - p s  References   [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.13)   source  #  FlightMechanics.qc2tas     Method .  qc2tas(qc, \u03c1, p)  Calculate true airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p t - p s), rho and p.  References   [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 12, based on formula 2.11)   source  #  FlightMechanics.qc2eas     Method .  qc2eas(qc, p)  Calculate equivalent airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p t - p s) and p.  References   [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd.   source  #  FlightMechanics.tas2eas     Method .  tas2eas(tas, \u03c1)  Calculate equivalent airspeed from true airspeed and density at current  altitude (\u03c1).  References   [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.15)   source  #  FlightMechanics.eas2tas     Method .  eas2tas(qc, \u03c1)  Calculate true airspeed from equivalent airspeed and density at current  altitude (\u03c1).  References   [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.15)   source  #  FlightMechanics.cas2eas     Method .  cas2eas(cas, \u03c1, p)  Calculate equivalent airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.eas2cas     Method .  eas2cas(eas, \u03c1, p)  Calculate calibrated airspeed from equivalent airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.cas2tas     Method .  cas2tas(cas, \u03c1, p)  Calculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.tas2cas     Method .  cas2tas(cas, \u03c1, p)  Calculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.tas_alpha_beta_from_uvw     Method .  tas_alpha_beta_from_uvw(u, v, w)  Calculate true air speed (TAS), angle of attack (\u03b1) and angle of side-slip (\u03b2) from aerodynamic velocity expressed in body axis.  References   [1] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications    (page 114, formulas 4.3,2 and 4.3,3)   source  #  FlightMechanics.incompressible_qinf     Method .  incompressible_qinf(tas, \u03c1)  Calculate incompressible dynamic pressure from true airspeed (tas) and density (\u03c1) at current altitude.  References   [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 13, formula 2.14)   source  #  FlightMechanics.compressible_qinf     Method .  compressible_qinf(tas, p, a)  Calculate compressible dynamic pressure from Mach number and static  pressure (p)  Two different models are used depending on the Mach number:   Subsonic case: Bernouilli's equation compressible form.  Supersonic case: to be implemented.   References   [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier   Science Ltd. (page 12)   source", 
            "title": "Anemometry"
        }, 
        {
            "location": "/#kinematics", 
            "text": "#  FlightMechanics.rigid_body_velocity     Method .  rigid_body_velocity(vel_P, \u03c9, r_PQ)  Calculate the velocity of a point Q of a rigid solid given the velocity of a  point P (vel_P), the rotational velocity of the solid (\u03c9) and the relative position of Q wrt P.  If the reference frame 1 is attached to the solid and the velocity is  calculated with respect to reference frame 0:  $v_{10}^{Q} = v_{10}^{P} + \\omega_{10} \\times r^{PQ}$  being:   $v_{10}^{Q}$ the velocity of point Q, fixed to 1, wrt 0  $\\omega_{10}$ the angular velocity of the solid 1 wrt 0  $r^{PQ}$ the position of Q wrt P ($r^{Q}-r^{P}$)   Every vector needs to be expressed in the same coordinate system.  References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (Section 1.3, page 26)  source  #  FlightMechanics.rigid_body_acceleration     Method .  rigid_body_acceleration(acc_P, \u03c9, \u03c9_dot, r_PQ)  Calculate the acceleration of a point Q of a rigid solid given the acceleration of a point P (acc P), the rotational velocity of the solid (\u03c9), the rotational  acceleration of the solid (\u03c9 dot) and the relative position of Q wrt P.  $a_{10}^{Q} = a_{10}^{P} + \\omega_{10} \\times (\\omega_{10} \\times r^{PQ}) + \\dot{\\omega}_{10} \\times r^{PQ}$  being:   $a_{10}^{Q}$ the acceleration of point Q, fixed to 1, wrt 0  $\\omega_{10}$ the angular velocity of the solid 1 wrt 0  $\\dot{\\omega}_{10}$ the angular acceleration of the solid 1 wrt 0  $r^{PQ}$ the position of Q wrt P ($r^{Q}-r^{P}$)   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (Section 1.3, Formaula 1.3-14c, page 26)  source", 
            "title": "Kinematics"
        }, 
        {
            "location": "/#6-degrees-of-freedom-dynamic-models", 
            "text": "#  FlightMechanics.six_dof_euler_fixed_mass     Method .  six_dof_euler_fixed_mass(state, mass, inertia, forces, moments)  Six degrees of freedom dynamic system using Euler angles for attitude  representation and assuming fixed mass.   Flat Earth hypothesis is applied and Earth reference frame is considered inertial.  It is considered that the aircraft xb-zb plane is a plane of symmetry so that Jxy and Jyz cross-product of inertia are zero and will not be taken into  account.  Arguments   state::12-element Array{Number,1} : state vector.   u, v, w: inertial linear velocity expressed in body axis. (m/s)   p, q, r: inertial rotatinal velocity expressed in body axis. (rad/s)   \u03c8, \u03b8, \u03d5: attitude given by Euler angles (zyx). Yaw, pitch, roll. (rad)   xe, ye, ze: position wrt the inertial system origin expressed in Earth Axis. (m)  mass::Number : total mass of the aircraft (kg)  inertia::3\u00d73 Array{Number,2} : inertia tensor (kg\u00b7m\u00b2)  forces::3-element Array{Number,1} : total forces expressed in body axis. (N)  moments::3-element Array{Number,1} : total moments expressed in body axis.(N\u00b7m)   Returns   state_dot : state vector derivative according to the equation of motion,   inertial properties and applied forces and moments.   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (Section 1.5, equations 1.5-4, page 46)   [2] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications   (Section 5.8, page 148, formulas 5.8,1 to 5.8,7)   [3] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle   dynamics. American Institute of Aeronautics and Astronautics.  (page 368, figure 10.2, not taking into account quaternions in angular   kinematic equations)  source  #  FlightMechanics.six_dof_quaternion_fixed_mass     Method .  six_dof_quaternion_fixed_mass(state, mass, inertia, forces, moments; k=0.0)  Six degrees of freedom dynamic system using quaternions for attitude  representation and assuming fixed mass.   Flat Earth hypothesis is applied and Earth reference frame is considered inertial.  It is considered that the aircraft xb-zb plane is a plane of symmetry so that Jxy and Jyz cross-product of inertia are zero and will not be taken into  account.  Arguments   state::12-element Array{Number,1} : state vector.   u, v, w: inertial linear velocity expressed in body axis. (m/s)   p, q, r: inertial rotatinal velocity expressed in body axis. (rad/s)   q0, q1, q2, q3: attitude given by quaternions.   xe, ye, ze: position wrt the inertial system origin expressed in Earth Axis. (m)  mass::Number : total mass of the aircraft (kg)  inertia::3\u00d73 Array{Number,2} : inertia tensor (kg\u00b7m\u00b2)  forces::3-element Array{Number,1} : total forces expressed in body axis. (N)  moments::3-element Array{Number,1} : total moments expressed in body axis.(N\u00b7m)  k::Number : orthonormality error factor.   Returns   state_dot : state vector derivative according to the equation of motion,   inertial properties and applied forces and moments.   Notes   See  1  or  2  for more information on quaternions  -  Euler angles conversions.  Orthonormality error factor is related to a numerical stability artifact used in angular kinematic equations. Let \u03bb = k * (1 - q0\u00b2 - q1\u00b2 - q2\u00b2 - q3\u00b2) be the orthonormality error. The term k\u00b7\u03bb\u00b7q is added to the angular kinematic equations in order to reduce the numerical integration error. According to reference [2] k\u00b7\u0394t \u2264 1. See  2  for more information on  orthonormality error factor.   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (Section 1.5, equations 1.5-4, page 46)   [2] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle   dynamics. American Institute of Aeronautics and Astronautics.  (page 368, figure 10.2)  source  #  FlightMechanics.six_dof_ecef_quaternion_fixed_mass     Method .  six_dof_ecef_quaternion_fixed_mass(state, mass, inertia, forces, moments;\nk=0.0, ellipsoid=WGS84)  Six degrees of freedom dynamic system using quaternions for attitude  representation and assuming fixed mass.   Ellipsoidal Earth Model is used and the ECEF reference frame is considered inertial.  It is considered that the aircraft xb-zb plane is a plane of symmetry so that Jxy and Jyz cross-product of inertia are zero and will not be taken into  account.  Arguments   state::12-element Array{Number,1} : state vector.   u, v, w: inertial linear velocity expressed in body axis. (m/s)   p, q, r: inertial rotatinal velocity expressed in body axis. (rad/s)   q0, q1, q2, q3: attitude given by quaternions.   xe, ye, ze: position wrt the inertial system origin expressed in Earth Axis. (m)  mass::Number : total mass of the aircraft (kg)  inertia::3\u00d73 Array{Number,2} : inertia tensor (kg\u00b7m\u00b2)  forces::3-element Array{Number,1} : total forces expressed in body axis. (N)  moments::3-element Array{Number,1} : total moments expressed in body axis.(N\u00b7m)  k::Number : orthonormality error factor.  ellipsoid::Ellipsoid : ellipsoid model to be used.   Returns   state_dot : state vector derivative according to the equation of motion,   inertial properties and applied forces and moments.   Notes   See  1  or  2  for more information on quaternions  -  Euler angles conversions.  Orthonormality error factor is related to a numerical stability artifact used in angular kinematic equations. Let \u03bb = k * (1 - q0\u00b2 - q1\u00b2 - q2\u00b2 - q3\u00b2) be the orthonormality error. The term k\u00b7\u03bb\u00b7q is added to the angular kinematic equations in order to reduce the numerical integration error. According to reference [2] k\u00b7\u0394t \u2264 1. See  2  for more information on  orthonormality error factor.  Implementation based on [1]. However, [2] can also be read.   References   [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:   dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 45, formula 1.5-1)   [2] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle   dynamics. American Institute of Aeronautics and Astronautics.  (page 396, figure 10.6)  source", 
            "title": "6 Degrees of Freedom dynamic models"
        }, 
        {
            "location": "/#index", 
            "text": "FlightMechanics.atmosphere_isa  FlightMechanics.body2ecef  FlightMechanics.body2ecef  FlightMechanics.body2hor  FlightMechanics.body2hor  FlightMechanics.body2wind  FlightMechanics.cas2eas  FlightMechanics.cas2tas  FlightMechanics.compressible_qinf  FlightMechanics.eas2cas  FlightMechanics.eas2tas  FlightMechanics.ecef2body  FlightMechanics.ecef2body  FlightMechanics.ecef2hor  FlightMechanics.ecef2llh  FlightMechanics.euler2quaternion  FlightMechanics.hor2body  FlightMechanics.hor2body  FlightMechanics.hor2ecef  FlightMechanics.hor2wind  FlightMechanics.incompressible_qinf  FlightMechanics.llh2ecef  FlightMechanics.qc2cas  FlightMechanics.qc2eas  FlightMechanics.qc2tas  FlightMechanics.quaternion2euler  FlightMechanics.rigid_body_acceleration  FlightMechanics.rigid_body_velocity  FlightMechanics.rot_matrix_body2ecef  FlightMechanics.rot_matrix_body2ecef  FlightMechanics.rot_matrix_body2hor  FlightMechanics.rot_matrix_body2hor  FlightMechanics.rot_matrix_ecef2body  FlightMechanics.rot_matrix_ecef2body  FlightMechanics.rot_matrix_ecef2hor  FlightMechanics.rot_matrix_hor2body  FlightMechanics.rot_matrix_hor2body  FlightMechanics.rot_matrix_hor2ecef  FlightMechanics.six_dof_ecef_quaternion_fixed_mass  FlightMechanics.six_dof_euler_fixed_mass  FlightMechanics.six_dof_quaternion_fixed_mass  FlightMechanics.tas2cas  FlightMechanics.tas2eas  FlightMechanics.tas_alpha_beta_from_uvw  FlightMechanics.wind2body  FlightMechanics.wind2hor", 
            "title": "Index"
        }
    ]
}