{
    "docs": [
        {
            "location": "/", 
            "text": "Flight Mechanics\n\n\n\n\nFlightMechanics.jl API REFERENCE\n\n\n\n\nFlight Mechanics\n\n\nFlightMechanics.jl API REFERENCE\n\n\nFunctions\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\nAtmosphere ISA (atmosphere.jl)\n\n\n#\n\n\nFlightMechanics.atmosphere_isa\n \n \nMethod\n.\n\n\natmosphere_isa(height)\n\n\n\n\nCalculate temperature, pressure, density and sound velocity for the given geopotential height according to International Standard Atmosphere 1976.\n\n\nNotes\n\n\nImplementation based on:\n\n\n.. [1] U.S. Standard Atmosphere, 1976, U.S. Government Printing Office,         Washington, D.C., 1976\n\n\nFrom: https://en.wikipedia.org/wiki/U.S._Standard_Atmosphere\n\n\n\n\n\n\n\n\nLayer\n\n\nh (m)\n\n\np (Pa)\n\n\nT (K)\n\n\n$\u03b1$ (K/m)\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n101325\n\n\n288.15\n\n\n-0.0065\n\n\n\n\n\n\n1\n\n\n11000\n\n\n22632.1\n\n\n216.65\n\n\n0\n\n\n\n\n\n\n2\n\n\n20000\n\n\n5474.89\n\n\n216.65\n\n\n0.001\n\n\n\n\n\n\n3\n\n\n32000\n\n\n868.019\n\n\n228.65\n\n\n0.0028\n\n\n\n\n\n\n4\n\n\n47000\n\n\n110.906\n\n\n270.65\n\n\n0\n\n\n\n\n\n\n5\n\n\n51000\n\n\n66.9389\n\n\n270.65\n\n\n-0.0028\n\n\n\n\n\n\n6\n\n\n71000\n\n\n3.95642\n\n\n214.65\n\n\n-0.002\n\n\n\n\n\n\n\n\nsource\n\n\n\n\nCoordinates Systems (coordinates.jl)\n\n\n#\n\n\nFlightMechanics.body2hor\n \n \nMethod\n.\n\n\nbody2hor(xb, yb, zb, chi, theta, phi)\n\n\n\n\nTransform body coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nchi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2body\n \n \nMethod\n.\n\n\nhor2body(xh, yh, zh, chi, theta, phi)\n\n\n\n\nTransform local horizon coordinates to body.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nchi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.wind2hor\n \n \nMethod\n.\n\n\nwind2hor(xw, yw, zw, chi, gamma, mu)\n\n\n\n\nTransform wind coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxw, yw, zw\n: wind coordinates.\n\n\nchi, gamma, mu\n: Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2wind\n \n \nMethod\n.\n\n\nhor2wind(xh, yh, zh, chi, gamma, mu)\n\n\nTransform local horizon coordinates to wind.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nchi, gamma, mu\n: Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2wind\n \n \nMethod\n.\n\n\nbody2wind(xb, yb, zb, alpha, beta)\n\n\n\n\nTransform body coordinates to wind.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nalpha, beta\n: Aerodynamic angles. Angle of attack, angle of side-slip (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.wind2body\n \n \nMethod\n.\n\n\nwind2body(xw, yw, zw, alpha, beta)\n\n\nTransform body coordinates to wind.\n\n\nArguments\n\n\n\n\nxw, yw, zw\n: wind coordinates.\n\n\nalpha, beta\n: Aerodynamic angles. Angle of attack, angle of side-slip (rad).\n\n\n\n\nsource\n\n\n\n\nAnemometry\n\n\n#\n\n\nFlightMechanics.qc2cas\n \n \nMethod\n.\n\n\nqc2cas(qc)\n\n\n\n\nCalculate calibrated airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure. qc = p_t - p_s\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.13)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.qc2tas\n \n \nMethod\n.\n\n\nqc2tas(qc)\n\n\n\n\nCalculate true airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s), rho and p.\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12, based on formula 2.11)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.qc2eas\n \n \nMethod\n.\n\n\nqc2eas(qc, p)\n\n\n\n\nCalculate equivalent airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s) and p.\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas2eas\n \n \nMethod\n.\n\n\ntas2eas(tas, \u03c1)\n\n\n\n\nCalculate equivalent airspeed from true airspeed and density at current  altitude (\u03c1).\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.eas2tas\n \n \nMethod\n.\n\n\neas2tas(qc, \u03c1)\n\n\n\n\nCalculate true airspeed from equivalent airspeed and density at current  altitude (\u03c1).\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.cas2eas\n \n \nMethod\n.\n\n\ncas2eas(cas, \u03c1, p)\n\n\n\n\nCalculate equivalent airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.eas2cas\n \n \nMethod\n.\n\n\neas2cas(eas, \u03c1, p)\n\n\n\n\nCalculate calibrated airspeed from equivalent airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.cas2tas\n \n \nMethod\n.\n\n\ncas2tas(cas, \u03c1, p)\n\n\n\n\nCalculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas2cas\n \n \nMethod\n.\n\n\ncas2tas(cas, \u03c1, p)\n\n\n\n\nCalculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas_alpha_beta_from_uvw\n \n \nMethod\n.\n\n\ntas_alpha_beta_from_uvw(u, v, w)\n\n\n\n\nCalculate true air speed (TAS), angle of attack (\u03b1) and angle of side-slip (\u03b2) from aerodynamic velocity expressed in body axis.\n\n\nImplementation from:\n\n\n.. [1] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications      (page 114, formulas 4.3,2 and 4.3,3)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.incompressible_qinf\n \n \nMethod\n.\n\n\nincompressible_qinf(tas, \u03c1)\n\n\n\n\nCalculate incompressible dynamic pressure from true airspeed (tas) and density (\u03c1) at current altitude.\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.14)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.compressible_qinf\n \n \nMethod\n.\n\n\ncompressible_qinf(tas, p, a)\n\n\n\n\nCalculate compressible dynamic pressure from Mach number and static  pressure (p)\n\n\nTwo different models are used depending on the Mach number:\n\n\n\n\nSubsonic case: Bernouilli's equation compressible form.\n\n\nSupersonic case: to be implemented.\n\n\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12)\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nFlightMechanics.atmosphere_isa\n\n\nFlightMechanics.body2hor\n\n\nFlightMechanics.body2wind\n\n\nFlightMechanics.cas2eas\n\n\nFlightMechanics.cas2tas\n\n\nFlightMechanics.compressible_qinf\n\n\nFlightMechanics.eas2cas\n\n\nFlightMechanics.eas2tas\n\n\nFlightMechanics.hor2body\n\n\nFlightMechanics.hor2wind\n\n\nFlightMechanics.incompressible_qinf\n\n\nFlightMechanics.qc2cas\n\n\nFlightMechanics.qc2eas\n\n\nFlightMechanics.qc2tas\n\n\nFlightMechanics.tas2cas\n\n\nFlightMechanics.tas2eas\n\n\nFlightMechanics.tas_alpha_beta_from_uvw\n\n\nFlightMechanics.wind2body\n\n\nFlightMechanics.wind2hor", 
            "title": "Home"
        }, 
        {
            "location": "/#flight-mechanics", 
            "text": "", 
            "title": "Flight Mechanics"
        }, 
        {
            "location": "/#flightmechanicsjl-api-reference", 
            "text": "Flight Mechanics  FlightMechanics.jl API REFERENCE  Functions  Index", 
            "title": "FlightMechanics.jl API REFERENCE"
        }, 
        {
            "location": "/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/#atmosphere-isa-atmospherejl", 
            "text": "#  FlightMechanics.atmosphere_isa     Method .  atmosphere_isa(height)  Calculate temperature, pressure, density and sound velocity for the given geopotential height according to International Standard Atmosphere 1976.  Notes  Implementation based on:  .. [1] U.S. Standard Atmosphere, 1976, U.S. Government Printing Office,         Washington, D.C., 1976  From: https://en.wikipedia.org/wiki/U.S._Standard_Atmosphere     Layer  h (m)  p (Pa)  T (K)  $\u03b1$ (K/m)      0  0  101325  288.15  -0.0065    1  11000  22632.1  216.65  0    2  20000  5474.89  216.65  0.001    3  32000  868.019  228.65  0.0028    4  47000  110.906  270.65  0    5  51000  66.9389  270.65  -0.0028    6  71000  3.95642  214.65  -0.002     source", 
            "title": "Atmosphere ISA (atmosphere.jl)"
        }, 
        {
            "location": "/#coordinates-systems-coordinatesjl", 
            "text": "#  FlightMechanics.body2hor     Method .  body2hor(xb, yb, zb, chi, theta, phi)  Transform body coordinates to local horizon.  Arguments   xb, yb, zb : body coordinates.  chi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.hor2body     Method .  hor2body(xh, yh, zh, chi, theta, phi)  Transform local horizon coordinates to body.  Arguments   xh, yh, zh : local horizon coordinates.  chi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.wind2hor     Method .  wind2hor(xw, yw, zw, chi, gamma, mu)  Transform wind coordinates to local horizon.  Arguments   xw, yw, zw : wind coordinates.  chi, gamma, mu : Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).   source  #  FlightMechanics.hor2wind     Method .  hor2wind(xh, yh, zh, chi, gamma, mu)  Transform local horizon coordinates to wind.  Arguments   xh, yh, zh : local horizon coordinates.  chi, gamma, mu : Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).   source  #  FlightMechanics.body2wind     Method .  body2wind(xb, yb, zb, alpha, beta)  Transform body coordinates to wind.  Arguments   xb, yb, zb : body coordinates.  alpha, beta : Aerodynamic angles. Angle of attack, angle of side-slip (rad).   source  #  FlightMechanics.wind2body     Method .  wind2body(xw, yw, zw, alpha, beta)  Transform body coordinates to wind.  Arguments   xw, yw, zw : wind coordinates.  alpha, beta : Aerodynamic angles. Angle of attack, angle of side-slip (rad).   source", 
            "title": "Coordinates Systems (coordinates.jl)"
        }, 
        {
            "location": "/#anemometry", 
            "text": "#  FlightMechanics.qc2cas     Method .  qc2cas(qc)  Calculate calibrated airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure. qc = p_t - p_s  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.13)  source  #  FlightMechanics.qc2tas     Method .  qc2tas(qc)  Calculate true airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s), rho and p.  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12, based on formula 2.11)  source  #  FlightMechanics.qc2eas     Method .  qc2eas(qc, p)  Calculate equivalent airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s) and p.  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd.  source  #  FlightMechanics.tas2eas     Method .  tas2eas(tas, \u03c1)  Calculate equivalent airspeed from true airspeed and density at current  altitude (\u03c1).  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)  source  #  FlightMechanics.eas2tas     Method .  eas2tas(qc, \u03c1)  Calculate true airspeed from equivalent airspeed and density at current  altitude (\u03c1).  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)  source  #  FlightMechanics.cas2eas     Method .  cas2eas(cas, \u03c1, p)  Calculate equivalent airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.eas2cas     Method .  eas2cas(eas, \u03c1, p)  Calculate calibrated airspeed from equivalent airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.cas2tas     Method .  cas2tas(cas, \u03c1, p)  Calculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.tas2cas     Method .  cas2tas(cas, \u03c1, p)  Calculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.tas_alpha_beta_from_uvw     Method .  tas_alpha_beta_from_uvw(u, v, w)  Calculate true air speed (TAS), angle of attack (\u03b1) and angle of side-slip (\u03b2) from aerodynamic velocity expressed in body axis.  Implementation from:  .. [1] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications      (page 114, formulas 4.3,2 and 4.3,3)  source  #  FlightMechanics.incompressible_qinf     Method .  incompressible_qinf(tas, \u03c1)  Calculate incompressible dynamic pressure from true airspeed (tas) and density (\u03c1) at current altitude.  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.14)  source  #  FlightMechanics.compressible_qinf     Method .  compressible_qinf(tas, p, a)  Calculate compressible dynamic pressure from Mach number and static  pressure (p)  Two different models are used depending on the Mach number:   Subsonic case: Bernouilli's equation compressible form.  Supersonic case: to be implemented.   .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12)  source", 
            "title": "Anemometry"
        }, 
        {
            "location": "/#index", 
            "text": "FlightMechanics.atmosphere_isa  FlightMechanics.body2hor  FlightMechanics.body2wind  FlightMechanics.cas2eas  FlightMechanics.cas2tas  FlightMechanics.compressible_qinf  FlightMechanics.eas2cas  FlightMechanics.eas2tas  FlightMechanics.hor2body  FlightMechanics.hor2wind  FlightMechanics.incompressible_qinf  FlightMechanics.qc2cas  FlightMechanics.qc2eas  FlightMechanics.qc2tas  FlightMechanics.tas2cas  FlightMechanics.tas2eas  FlightMechanics.tas_alpha_beta_from_uvw  FlightMechanics.wind2body  FlightMechanics.wind2hor", 
            "title": "Index"
        }
    ]
}