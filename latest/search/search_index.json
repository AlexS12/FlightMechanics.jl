{
    "docs": [
        {
            "location": "/", 
            "text": "Flight Mechanics\n\n\n\n\nFlightMechanics.jl API REFERENCE\n\n\n\n\nFlight Mechanics\n\n\nFlightMechanics.jl API REFERENCE\n\n\nFunctions\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nFunctions\n\n\n\n\nAtmosphere ISA (atmosphere.jl)\n\n\n#\n\n\nFlightMechanics.atmosphere_isa\n \n \nMethod\n.\n\n\natmosphere_isa(height)\n\n\n\n\nCalculate temperature, pressure, density and sound velocity for the given geopotential height according to International Standard Atmosphere 1976.\n\n\nNotes\n\n\nImplementation based on:\n\n\n.. [1] U.S. Standard Atmosphere, 1976, U.S. Government Printing Office,         Washington, D.C., 1976\n\n\nFrom: https://en.wikipedia.org/wiki/U.S._Standard_Atmosphere\n\n\n\n\n\n\n\n\nLayer\n\n\nh (m)\n\n\np (Pa)\n\n\nT (K)\n\n\n$\u03b1$ (K/m)\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n101325\n\n\n288.15\n\n\n-0.0065\n\n\n\n\n\n\n1\n\n\n11000\n\n\n22632.1\n\n\n216.65\n\n\n0\n\n\n\n\n\n\n2\n\n\n20000\n\n\n5474.89\n\n\n216.65\n\n\n0.001\n\n\n\n\n\n\n3\n\n\n32000\n\n\n868.019\n\n\n228.65\n\n\n0.0028\n\n\n\n\n\n\n4\n\n\n47000\n\n\n110.906\n\n\n270.65\n\n\n0\n\n\n\n\n\n\n5\n\n\n51000\n\n\n66.9389\n\n\n270.65\n\n\n-0.0028\n\n\n\n\n\n\n6\n\n\n71000\n\n\n3.95642\n\n\n214.65\n\n\n-0.002\n\n\n\n\n\n\n\n\nsource\n\n\n\n\nCoordinates Systems (coordinates.jl)\n\n\n#\n\n\nFlightMechanics.body2hor\n \n \nMethod\n.\n\n\nbody2hor(xb, yb, zb, psi, theta, phi)\n\n\n\n\nTransform body coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2hor\n \n \nMethod\n.\n\n\nbody2hor(xb, yb, zb, q0, q1, q2, q3)\n\n\n\n\nTransform body coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2body\n \n \nMethod\n.\n\n\nhor2body(xh, yh, zh, psi, theta, phi)\n\n\n\n\nTransform local horizon coordinates to body.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2body\n \n \nMethod\n.\n\n\nhor2body(xb, yb, zb, q0, q1, q2, q3)\n\n\n\n\nTransform local horizon corrdinates to body coordinates.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.wind2hor\n \n \nMethod\n.\n\n\nwind2hor(xw, yw, zw, chi, gamma, mu)\n\n\n\n\nTransform wind coordinates to local horizon.\n\n\nArguments\n\n\n\n\nxw, yw, zw\n: wind coordinates.\n\n\nchi, gamma, mu\n: Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2wind\n \n \nMethod\n.\n\n\nhor2wind(xh, yh, zh, chi, gamma, mu)\n\n\n\n\nTransform local horizon coordinates to wind.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nchi, gamma, mu\n: Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2wind\n \n \nMethod\n.\n\n\nbody2wind(xb, yb, zb, alpha, beta)\n\n\n\n\nTransform body coordinates to wind.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nalpha, beta\n: Aerodynamic angles. Angle of attack, angle of side-slip (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.wind2body\n \n \nMethod\n.\n\n\nwind2body(xw, yw, zw, alpha, beta)\n\n\n\n\nTransform body coordinates to wind.\n\n\nArguments\n\n\n\n\nxw, yw, zw\n: wind coordinates.\n\n\nalpha, beta\n: Aerodynamic angles. Angle of attack, angle of side-slip (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.euler2quaternion\n \n \nMethod\n.\n\n\neuler2quaternion(psi, theta, phi)\n\n\n\n\nTransform Euler angles orientation to quaternion orientation.\n\n\nArguments\n\n\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nImplementation from: .. [1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle  dynamics. American Institute of Aeronautics and Astronautics.  (page 126, formula 4.78)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.quaternion2euler\n \n \nMethod\n.\n\n\nquaternion2euler(q0, q1, q2, q3)\n\n\n\n\nTransform quaternion orientation to Euler angles orientation.\n\n\nArguments \nq0, q1, q2, q3\n: quaternions.\n\n\nImplementation from: .. [1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle  dynamics. American Institute of Aeronautics and Astronautics.  (page 127, formula 4.82)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2hor\n \n \nMethod\n.\n\n\necef2hor(xecef, yecef, zecef, lat, lon)\n\n\n\n\nTransform ECEF (Earth Fixed Earth Centered) coordinates to local horizon coordinates using geodetic latitude and longitude.\n\n\nArguments\n\n\n\n\nxecef, yecef, zecef\n: ECEF coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\n\n\nImplementation from:\n\n\n.. [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:  dynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 36, formula 1.4-9)\n\n\nNotes\n\n\nX, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y-\nX, Z-\nY, X-\nZ\n\n\n[1] Only defines the opposite transformation. However this must be the   transpose of hor2ecef.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.hor2ecef\n \n \nMethod\n.\n\n\nhor2ecef(xh, yh, zh, lat, lon)\n\n\n\n\nTransform local horizon coordinates to ECEF (Earth Centered Earth Fixed)  coordinates using geodetic latitude and longitude.\n\n\nArguments\n\n\n\n\nxh, yh, zh\n: local horizon coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\n\n\nImplementation from:\n\n\n.. [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:  dynamics, controls design, and autonomous systems. John Wiley \n Sons.  (page 36, formula 1.4-9)\n\n\nNotes\n\n\nX, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y-\nX, Z-\nY, X-\nZ\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2body\n \n \nMethod\n.\n\n\necef2body(xecef, yecef, zecef, lat, lon, psi, theta, phi)\n\n\n\n\nTransform ECEF coordinates to body coordinates.\n\n\nArguments\n\n\n\n\nxecef, yecef, zecef\n: ECEF (Earth Centered Earth Fixed) coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2body\n \n \nMethod\n.\n\n\necef2body(xecef, yecef, zecef, lat, lon, q0, q1, q2, q3)\n\n\n\n\nTransform ECEF coordinates to body coordinates.\n\n\nArguments\n\n\n\n\nxecef, yecef, zecef\n: ECEF (Earth Centered Earth Fixed) coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2ecef\n \n \nMethod\n.\n\n\nbody2ecef(xb, yb, zb, lat, lon, psi, theta, phi)\n\n\n\n\nTransform body coordinates to ECEF coordinates.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\npsi, theta, phi\n: Euler angles. Yaw, pitch, roll (rad).\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.body2ecef\n \n \nMethod\n.\n\n\nbody2ecef(xb, yb, zb, lat, lon, q0, q1, q2, q3)\n\n\n\n\nTransform body coordinates to ECEF coordinates.\n\n\nArguments\n\n\n\n\nxb, yb, zb\n: body coordinates.\n\n\nlat\n: geodetic latitude (rad).\n\n\nlon\n: longitude (rad).\n\n\nq0, q1, q2, q3\n: quaternions.\n\n\n\n\nsource\n\n\n#\n\n\nFlightMechanics.llh2ecef\n \n \nMethod\n.\n\n\nllh2ecef(lat, lon, height; ellipsoid=WGS84)\n\n\n\n\nTransform geodetic latitude, longitude and ellipsoidal height to ECEF for the given ellipsoid (default ellipsoid is WGS84)\n\n\nImplementation from: .. [1] Rogers, R. M. (2007). Applied mathematics in integrated navigation  systems. American Institute of Aeronautics and Astronautics.  (Page 75, equations 4.20, 4.21, 4.22)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.ecef2llh\n \n \nMethod\n.\n\n\necef2llh(xecef, yecef, zecef; ellipsoid=WGS84)\n\n\n\n\nTransform ECEF coordinates to geodetic latitude, longitude and ellipsoidal  height for the given ellipsoid (default ellipsoid is WGS84)\n\n\nImplementation from: .. [1] Bowring, B. R. (1976). Transformation from spatial to geographical   coordinates. Survey review, 23(181), 323-327. .. [2] Bowring, B. R. (1985). The accuracy of geodetic latitude and height  equations. Survey Review, 28(218), 202-206.\n\n\nNotes\n\n\n\n\nThe transformation is direct without iterations as [1] introduced the need to\n\n\n\n\niterate for near Earth positions.\n\n\n\n\n[2] is an updated of incresed accuracy of [1]. The former is used for\n\n\n\n\nin this implementation although the latter implementation is commented in the  code.\n\n\n\n\nModel becomes unstable if latitude is close to 90\u00ba. An alternative equation\n\n\n\n\ncan be found in [2] equation (16) but has not been implemented.\n\n\nsource\n\n\n\n\nAnemometry\n\n\n#\n\n\nFlightMechanics.qc2cas\n \n \nMethod\n.\n\n\nqc2cas(qc)\n\n\n\n\nCalculate calibrated airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure. qc = p_t - p_s\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.13)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.qc2tas\n \n \nMethod\n.\n\n\nqc2tas(qc)\n\n\n\n\nCalculate true airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s), rho and p.\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12, based on formula 2.11)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.qc2eas\n \n \nMethod\n.\n\n\nqc2eas(qc, p)\n\n\n\n\nCalculate equivalent airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s) and p.\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas2eas\n \n \nMethod\n.\n\n\ntas2eas(tas, \u03c1)\n\n\n\n\nCalculate equivalent airspeed from true airspeed and density at current  altitude (\u03c1).\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.eas2tas\n \n \nMethod\n.\n\n\neas2tas(qc, \u03c1)\n\n\n\n\nCalculate true airspeed from equivalent airspeed and density at current  altitude (\u03c1).\n\n\nImplementation from:\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.cas2eas\n \n \nMethod\n.\n\n\ncas2eas(cas, \u03c1, p)\n\n\n\n\nCalculate equivalent airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.eas2cas\n \n \nMethod\n.\n\n\neas2cas(eas, \u03c1, p)\n\n\n\n\nCalculate calibrated airspeed from equivalent airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.cas2tas\n \n \nMethod\n.\n\n\ncas2tas(cas, \u03c1, p)\n\n\n\n\nCalculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas2cas\n \n \nMethod\n.\n\n\ncas2tas(cas, \u03c1, p)\n\n\n\n\nCalculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.\n\n\nsource\n\n\n#\n\n\nFlightMechanics.tas_alpha_beta_from_uvw\n \n \nMethod\n.\n\n\ntas_alpha_beta_from_uvw(u, v, w)\n\n\n\n\nCalculate true air speed (TAS), angle of attack (\u03b1) and angle of side-slip (\u03b2) from aerodynamic velocity expressed in body axis.\n\n\nImplementation from:\n\n\n.. [1] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications      (page 114, formulas 4.3,2 and 4.3,3)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.incompressible_qinf\n \n \nMethod\n.\n\n\nincompressible_qinf(tas, \u03c1)\n\n\n\n\nCalculate incompressible dynamic pressure from true airspeed (tas) and density (\u03c1) at current altitude.\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.14)\n\n\nsource\n\n\n#\n\n\nFlightMechanics.compressible_qinf\n \n \nMethod\n.\n\n\ncompressible_qinf(tas, p, a)\n\n\n\n\nCalculate compressible dynamic pressure from Mach number and static  pressure (p)\n\n\nTwo different models are used depending on the Mach number:\n\n\n\n\nSubsonic case: Bernouilli's equation compressible form.\n\n\nSupersonic case: to be implemented.\n\n\n\n\n.. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12)\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nFlightMechanics.atmosphere_isa\n\n\nFlightMechanics.body2ecef\n\n\nFlightMechanics.body2ecef\n\n\nFlightMechanics.body2hor\n\n\nFlightMechanics.body2hor\n\n\nFlightMechanics.body2wind\n\n\nFlightMechanics.cas2eas\n\n\nFlightMechanics.cas2tas\n\n\nFlightMechanics.compressible_qinf\n\n\nFlightMechanics.eas2cas\n\n\nFlightMechanics.eas2tas\n\n\nFlightMechanics.ecef2body\n\n\nFlightMechanics.ecef2body\n\n\nFlightMechanics.ecef2hor\n\n\nFlightMechanics.ecef2llh\n\n\nFlightMechanics.euler2quaternion\n\n\nFlightMechanics.hor2body\n\n\nFlightMechanics.hor2body\n\n\nFlightMechanics.hor2ecef\n\n\nFlightMechanics.hor2wind\n\n\nFlightMechanics.incompressible_qinf\n\n\nFlightMechanics.llh2ecef\n\n\nFlightMechanics.qc2cas\n\n\nFlightMechanics.qc2eas\n\n\nFlightMechanics.qc2tas\n\n\nFlightMechanics.quaternion2euler\n\n\nFlightMechanics.tas2cas\n\n\nFlightMechanics.tas2eas\n\n\nFlightMechanics.tas_alpha_beta_from_uvw\n\n\nFlightMechanics.wind2body\n\n\nFlightMechanics.wind2hor", 
            "title": "Home"
        }, 
        {
            "location": "/#flight-mechanics", 
            "text": "", 
            "title": "Flight Mechanics"
        }, 
        {
            "location": "/#flightmechanicsjl-api-reference", 
            "text": "Flight Mechanics  FlightMechanics.jl API REFERENCE  Functions  Index", 
            "title": "FlightMechanics.jl API REFERENCE"
        }, 
        {
            "location": "/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/#atmosphere-isa-atmospherejl", 
            "text": "#  FlightMechanics.atmosphere_isa     Method .  atmosphere_isa(height)  Calculate temperature, pressure, density and sound velocity for the given geopotential height according to International Standard Atmosphere 1976.  Notes  Implementation based on:  .. [1] U.S. Standard Atmosphere, 1976, U.S. Government Printing Office,         Washington, D.C., 1976  From: https://en.wikipedia.org/wiki/U.S._Standard_Atmosphere     Layer  h (m)  p (Pa)  T (K)  $\u03b1$ (K/m)      0  0  101325  288.15  -0.0065    1  11000  22632.1  216.65  0    2  20000  5474.89  216.65  0.001    3  32000  868.019  228.65  0.0028    4  47000  110.906  270.65  0    5  51000  66.9389  270.65  -0.0028    6  71000  3.95642  214.65  -0.002     source", 
            "title": "Atmosphere ISA (atmosphere.jl)"
        }, 
        {
            "location": "/#coordinates-systems-coordinatesjl", 
            "text": "#  FlightMechanics.body2hor     Method .  body2hor(xb, yb, zb, psi, theta, phi)  Transform body coordinates to local horizon.  Arguments   xb, yb, zb : body coordinates.  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.body2hor     Method .  body2hor(xb, yb, zb, q0, q1, q2, q3)  Transform body coordinates to local horizon.  Arguments   xb, yb, zb : body coordinates.  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.hor2body     Method .  hor2body(xh, yh, zh, psi, theta, phi)  Transform local horizon coordinates to body.  Arguments   xh, yh, zh : local horizon coordinates.  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.hor2body     Method .  hor2body(xb, yb, zb, q0, q1, q2, q3)  Transform local horizon corrdinates to body coordinates.  Arguments   xh, yh, zh : local horizon coordinates.  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.wind2hor     Method .  wind2hor(xw, yw, zw, chi, gamma, mu)  Transform wind coordinates to local horizon.  Arguments   xw, yw, zw : wind coordinates.  chi, gamma, mu : Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).   source  #  FlightMechanics.hor2wind     Method .  hor2wind(xh, yh, zh, chi, gamma, mu)  Transform local horizon coordinates to wind.  Arguments   xh, yh, zh : local horizon coordinates.  chi, gamma, mu : Velocity angles. Yaw (azimuth), pitch(elevation), roll (rad).   source  #  FlightMechanics.body2wind     Method .  body2wind(xb, yb, zb, alpha, beta)  Transform body coordinates to wind.  Arguments   xb, yb, zb : body coordinates.  alpha, beta : Aerodynamic angles. Angle of attack, angle of side-slip (rad).   source  #  FlightMechanics.wind2body     Method .  wind2body(xw, yw, zw, alpha, beta)  Transform body coordinates to wind.  Arguments   xw, yw, zw : wind coordinates.  alpha, beta : Aerodynamic angles. Angle of attack, angle of side-slip (rad).   source  #  FlightMechanics.euler2quaternion     Method .  euler2quaternion(psi, theta, phi)  Transform Euler angles orientation to quaternion orientation.  Arguments   psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   Implementation from: .. [1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle  dynamics. American Institute of Aeronautics and Astronautics.  (page 126, formula 4.78)  source  #  FlightMechanics.quaternion2euler     Method .  quaternion2euler(q0, q1, q2, q3)  Transform quaternion orientation to Euler angles orientation.", 
            "title": "Coordinates Systems (coordinates.jl)"
        }, 
        {
            "location": "/#arguments-q0-q1-q2-q3-quaternions", 
            "text": "Implementation from: .. [1] Zipfel, P. H. (2007). Modeling and simulation of aerospace vehicle  dynamics. American Institute of Aeronautics and Astronautics.  (page 127, formula 4.82)  source  #  FlightMechanics.ecef2hor     Method .  ecef2hor(xecef, yecef, zecef, lat, lon)  Transform ECEF (Earth Fixed Earth Centered) coordinates to local horizon coordinates using geodetic latitude and longitude.  Arguments   xecef, yecef, zecef : ECEF coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).   Implementation from:  .. [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:  dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 36, formula 1.4-9)  Notes  X, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y- X, Z- Y, X- Z  [1] Only defines the opposite transformation. However this must be the   transpose of hor2ecef.  source  #  FlightMechanics.hor2ecef     Method .  hor2ecef(xh, yh, zh, lat, lon)  Transform local horizon coordinates to ECEF (Earth Centered Earth Fixed)  coordinates using geodetic latitude and longitude.  Arguments   xh, yh, zh : local horizon coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).   Implementation from:  .. [1] Stevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation:  dynamics, controls design, and autonomous systems. John Wiley   Sons.  (page 36, formula 1.4-9)  Notes  X, Y, Z ECEF are defined in a different way in [1]. In order to reproduce this  transformation substitute in [1] Y- X, Z- Y, X- Z  source  #  FlightMechanics.ecef2body     Method .  ecef2body(xecef, yecef, zecef, lat, lon, psi, theta, phi)  Transform ECEF coordinates to body coordinates.  Arguments   xecef, yecef, zecef : ECEF (Earth Centered Earth Fixed) coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.ecef2body     Method .  ecef2body(xecef, yecef, zecef, lat, lon, q0, q1, q2, q3)  Transform ECEF coordinates to body coordinates.  Arguments   xecef, yecef, zecef : ECEF (Earth Centered Earth Fixed) coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.body2ecef     Method .  body2ecef(xb, yb, zb, lat, lon, psi, theta, phi)  Transform body coordinates to ECEF coordinates.  Arguments   xb, yb, zb : body coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  psi, theta, phi : Euler angles. Yaw, pitch, roll (rad).   source  #  FlightMechanics.body2ecef     Method .  body2ecef(xb, yb, zb, lat, lon, q0, q1, q2, q3)  Transform body coordinates to ECEF coordinates.  Arguments   xb, yb, zb : body coordinates.  lat : geodetic latitude (rad).  lon : longitude (rad).  q0, q1, q2, q3 : quaternions.   source  #  FlightMechanics.llh2ecef     Method .  llh2ecef(lat, lon, height; ellipsoid=WGS84)  Transform geodetic latitude, longitude and ellipsoidal height to ECEF for the given ellipsoid (default ellipsoid is WGS84)  Implementation from: .. [1] Rogers, R. M. (2007). Applied mathematics in integrated navigation  systems. American Institute of Aeronautics and Astronautics.  (Page 75, equations 4.20, 4.21, 4.22)  source  #  FlightMechanics.ecef2llh     Method .  ecef2llh(xecef, yecef, zecef; ellipsoid=WGS84)  Transform ECEF coordinates to geodetic latitude, longitude and ellipsoidal  height for the given ellipsoid (default ellipsoid is WGS84)  Implementation from: .. [1] Bowring, B. R. (1976). Transformation from spatial to geographical   coordinates. Survey review, 23(181), 323-327. .. [2] Bowring, B. R. (1985). The accuracy of geodetic latitude and height  equations. Survey Review, 28(218), 202-206.  Notes   The transformation is direct without iterations as [1] introduced the need to   iterate for near Earth positions.   [2] is an updated of incresed accuracy of [1]. The former is used for   in this implementation although the latter implementation is commented in the  code.   Model becomes unstable if latitude is close to 90\u00ba. An alternative equation   can be found in [2] equation (16) but has not been implemented.  source", 
            "title": "Arguments q0, q1, q2, q3: quaternions."
        }, 
        {
            "location": "/#anemometry", 
            "text": "#  FlightMechanics.qc2cas     Method .  qc2cas(qc)  Calculate calibrated airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure. qc = p_t - p_s  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.13)  source  #  FlightMechanics.qc2tas     Method .  qc2tas(qc)  Calculate true airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s), rho and p.  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12, based on formula 2.11)  source  #  FlightMechanics.qc2eas     Method .  qc2eas(qc, p)  Calculate equivalent airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = p_t - p_s) and p.  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd.  source  #  FlightMechanics.tas2eas     Method .  tas2eas(tas, \u03c1)  Calculate equivalent airspeed from true airspeed and density at current  altitude (\u03c1).  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)  source  #  FlightMechanics.eas2tas     Method .  eas2tas(qc, \u03c1)  Calculate true airspeed from equivalent airspeed and density at current  altitude (\u03c1).  Implementation from:  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.15)  source  #  FlightMechanics.cas2eas     Method .  cas2eas(cas, \u03c1, p)  Calculate equivalent airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.eas2cas     Method .  eas2cas(eas, \u03c1, p)  Calculate calibrated airspeed from equivalent airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.cas2tas     Method .  cas2tas(cas, \u03c1, p)  Calculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.tas2cas     Method .  cas2tas(cas, \u03c1, p)  Calculate true airspeed from calibrated airspeed, density (\u03c1) and pressure (p) at the current altitude.  source  #  FlightMechanics.tas_alpha_beta_from_uvw     Method .  tas_alpha_beta_from_uvw(u, v, w)  Calculate true air speed (TAS), angle of attack (\u03b1) and angle of side-slip (\u03b2) from aerodynamic velocity expressed in body axis.  Implementation from:  .. [1] Etkin, B. (2005). Dynamics of atmospheric flight. Dover Publications      (page 114, formulas 4.3,2 and 4.3,3)  source  #  FlightMechanics.incompressible_qinf     Method .  incompressible_qinf(tas, \u03c1)  Calculate incompressible dynamic pressure from true airspeed (tas) and density (\u03c1) at current altitude.  .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 13, formula 2.14)  source  #  FlightMechanics.compressible_qinf     Method .  compressible_qinf(tas, p, a)  Calculate compressible dynamic pressure from Mach number and static  pressure (p)  Two different models are used depending on the Mach number:   Subsonic case: Bernouilli's equation compressible form.  Supersonic case: to be implemented.   .. [1] Ward, D. T. (1993). Introduction to flight test engineering. Elsevier     Science Ltd. (page 12)  source", 
            "title": "Anemometry"
        }, 
        {
            "location": "/#index", 
            "text": "FlightMechanics.atmosphere_isa  FlightMechanics.body2ecef  FlightMechanics.body2ecef  FlightMechanics.body2hor  FlightMechanics.body2hor  FlightMechanics.body2wind  FlightMechanics.cas2eas  FlightMechanics.cas2tas  FlightMechanics.compressible_qinf  FlightMechanics.eas2cas  FlightMechanics.eas2tas  FlightMechanics.ecef2body  FlightMechanics.ecef2body  FlightMechanics.ecef2hor  FlightMechanics.ecef2llh  FlightMechanics.euler2quaternion  FlightMechanics.hor2body  FlightMechanics.hor2body  FlightMechanics.hor2ecef  FlightMechanics.hor2wind  FlightMechanics.incompressible_qinf  FlightMechanics.llh2ecef  FlightMechanics.qc2cas  FlightMechanics.qc2eas  FlightMechanics.qc2tas  FlightMechanics.quaternion2euler  FlightMechanics.tas2cas  FlightMechanics.tas2eas  FlightMechanics.tas_alpha_beta_from_uvw  FlightMechanics.wind2body  FlightMechanics.wind2hor", 
            "title": "Index"
        }
    ]
}